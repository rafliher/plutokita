<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Manajemen Inventaris | PLUTO KITA</title>
    <%- include('templates/heads') %>

    <style>
        .dataTables_wrapper {
            padding: 15px 20px;
            border-radius: 10px;
            background-color: white;
            margin-bottom: 20px;
        }

        .drag-drop-area{
            border: dashed  3px grey;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        span.greenHighlight {
            color: white;
            background-color: green;
            border-radius: 3px;
            padding: 1px 5px;
            font-weight: 400;
        }

        span.redHighlight {
            color: white;
            background-color: red;
            border-radius: 3px;
            padding: 1px 5px;
            font-weight: 400;
        }
    </style>
</head>

<body>

    <%- include('templates/header', {user: {}}); %>

    <!-- Main Content -->
    <div class="container-fluid d-flex" style="padding-left: 0; min-height: calc(100vh - 200px); background-color: #dedede;">
        <%- include('templates/sidebar', {activeSidebar: 'inventoryManagement'}) %>
        <div class="col-10">
            <div style="margin: 10px; padding: 10px; border-radius: 5px;background-color: #efefef;">
                <div class="container d-flex justify-content-between mt-3">
                    <h3>Manajemen Inventaris</h3>
                    <div class="mb-3">
                        <button class="btn btn-primary" id="addInventoryBtn" data-toggle="modal">Tambah Inventaris</button>
                    </div>
                </div>
    
                <!-- Cadet Table -->
                <table id="inventoryTable" class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nama</th>
                            <th>Kategori</th>
                            <th>Lokasi</th>
                            <th>Status</th>
                            <th>Aksi</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- DataTable content will be added dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <%- include('templates/footer') %>
    <%- include('templates/scripts') %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js" integrity="sha512-r22gChDnGvBylk90+2e/ycr3RVrDi8DIOkIGNhJlKfuyQM4tIRAI062MaV8sfjQKYVGjOBaZBOA87z+IhZE9DA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js" integrity="sha512-csNcFYJniKjJxRWRV1R7fvnXrycHP6qDR21mgz1ZP55xY5d+aHLfo9/FcGDQLfn2IfngbAHd8LdfsagcCqgTcQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        $(document).ready(function () {
            // Function to fetch inventory data
            function fetchCadetData() {
                $.ajax({
                    type: 'GET',
                    url: '/api/inventory',
                    success: function (response) {
                        // Populate DataTable with the fetched data
                        if (response.data && response.data.length > 0) {
                            $('#inventoryTable tbody').empty(); // Clear existing rows
                            response.data.forEach(function (inventory) {
                                $('#inventoryTable tbody').append(`
                                    <tr>
                                        <td>${inventory.id}</td>
                                        <td>${inventory.name}</td>
                                        <td>${inventory.category.name}</td>
                                        <td>${inventory.location.charAt(0).toUpperCase() + inventory.location.slice(1)}</td>
                                        <td><span class="`+ (inventory.status == 'baik'?'greenHighlight':'redHighlight') +`">${inventory.status.charAt(0).toUpperCase() + inventory.status.slice(1)}</span></td>
                                        <td>
                                            <button class="btn btn-danger" onclick="deleteInventory('${inventory.id}')">Hapus</button>
                                            <button class="btn btn-info" onclick="updateInventory('${inventory.id}','${inventory.name}',${inventory.categoryId},'${inventory.status}','${inventory.location}')">Sunting</button>
                                            <!-- You can add other action buttons as needed -->
                                        </td>
                                    </tr>
                                `);
                            });
                            // Initialize DataTable
                            $('#inventoryTable').DataTable();
                        }
                    },
                    error: function () {
                        console.error('Failed to fetch inventory data.');
                    }
                });
            }
            
            // Function to handle delete inventory
            window.deleteInventory = function (id) {   
                // Show confirmation prompt
                Swal.fire({
                    text: 'Apakah ingin menghapus inventaris ini?',
                    showCancelButton: true,
                    confirmButtonText: 'Ya',
                    cancelButtonText: 'Batal',
                    reverseButtons: true,
                    icon: 'warning',
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send DELETE request to /api/inventory/${id}
                        fetch(`/api/inventory/${id}`, {
                            method: 'DELETE',
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // Show success alert
                                    Swal.fire({
                                        title: 'Berhasil',
                                        text: data.message,
                                        icon: 'success'
                                    }).then(() => {
                                        // Refresh the inventory data after successful deletion
                                        fetchCadetData();
                                    });
                                } else {
                                    // Show error alert
                                    Swal.fire({
                                        title: 'Gagal',
                                        text: data.message,
                                        icon: 'error'
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error deleting inventory:', error);
                                // Show error alert
                                Swal.fire({
                                    title: 'Gagal',
                                    text: 'Terjadi kesalahan saat menghapus inventaris.',
                                    icon: 'error'
                                });
                            });
                    }
                });
            };

            window.updateInventory = function (id, name, categoryId, status, location) {
                const categories = [
                    { id: 1, name: 'Keyboard' },
                    { id: 2, name: 'Mouse' },
                    { id: 3, name: 'CPU' },
                    { id: 4, name: 'Monitor' },
                    { id: 5, name: 'UPS' }
                ];

                const statusOptions = ['baik', 'rusak'];
                const locationOptions = ['warnet', 'dewan', 'lemari', 'tengah'];

                const categorySelectOptions = categories.map(category => `<option value="${category.id}" ${category.id === categoryId ? 'selected' : ''}>${category.name}</option>`);

                const statusSelectOptions = statusOptions.map(option => `<option value="${option}" ${option === status ? 'selected' : ''}>${option.charAt(0).toUpperCase() + option.slice(1)}</option>`);

                const locationSelectOptions = locationOptions.map(option => `<option value="${option}" ${option === location ? 'selected' : ''}>${option.charAt(0).toUpperCase() + option.slice(1)}</option>`);

                Swal.fire({
                    title: 'Sunting Inventaris',
                    html: `
                        <p style="margin: 10px 0px 5px 0px;">ID</p>
                        <input type="text" id="id" value="${id}" class="swal2-input" disabled style="width: 350px; margin-top: 0px;">
                        <p style="margin: 10px 0px 5px 0px;">Nama</p>
                        <input type="text" id="name" value="${name}" class="swal2-input" style="width: 350px; margin: 0px 0px 10px 0px;">
                        <p style="margin: 10px 0px 5px 0px;">Kategori</p>
                        <select id="category" class="swal2-input" style="width: 350px; margin: 0px 0px 10px 0px;">${categorySelectOptions}</select>
                        <p style="margin: 10px 0px 5px 0px;">Status</p>
                        <select id="status" class="swal2-input" style="width: 350px; margin: 0px 0px 10px 0px;">${statusSelectOptions}</select>
                        <p style="margin: 10px 0px 5px 0px;">Lokasi</p>
                        <select id="location" class="swal2-input" style="width: 350px; margin: 0px 0px 10px 0px;">${locationSelectOptions}</select>
                    `,
                    focusConfirm: false,
                    confirmButtonText: 'Simpan',
                    showCancelButton: true,
                    cancelButtonText: 'Batal',
                    preConfirm: () => {
                        const updatedName = document.getElementById('name').value;
                        const updatedCategoryId = document.getElementById('category').value;
                        const updatedStatus = document.getElementById('status').value;
                        const updatedLocation = document.getElementById('location').value;

                        return fetch(`/api/inventory/${id}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                name: updatedName,
                                categoryId: updatedCategoryId,
                                status: updatedStatus,
                                location: updatedLocation,
                            }),
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // Show success alert
                                    Swal.fire({
                                        title: 'Berhasil',
                                        text: data.message,
                                        icon: 'success'
                                    }).then(() => {
                                        // Refresh the inventory data after successful deletion
                                        fetchCadetData();
                                    });
                                } else {
                                    // Show error alert
                                    Swal.fire({
                                        title: 'Gagal',
                                        text: data.message,
                                        icon: 'error'
                                    });
                                }
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });
            };

            // Fetch and update DataTable on page load
            fetchCadetData();
    
            $('#addInventoryBtn').click(function () {
                
                Swal.fire({
                    title: 'Unggah Data Inventaris',
                    showCancelButton: true,
                    html: `
                        <div id="dropArea" class="drag-drop-area" style="padding:5px">
                            <p class="mt-2">Seret dan lepas file xlsx atau klik di sini untuk memilih file.</p>
                            <input type="file" id="inventoryXlsx" accept=".xlsx" style="display:block;border: groove 1px grey;" />
                        </div>
                        `,
                        focusConfirm: false,
                        confirmButtonText: 'Unggah',
                        showDenyButton: true,
                        denyButtonText: "Unduh template xlsx",
                        denyButtonColor: "green",
                        showLoaderOnConfirm: true,
                    didOpen: (alert) => {
                        // Set up drag-and-drop functionality
                        const dropArea = document.getElementById('dropArea');
                        dropArea.addEventListener('dragover', handleDragOver, false);
                        dropArea.addEventListener('dragleave', handleDragLeave, false);
                        dropArea.addEventListener('drop', handleFileSelect, false);
        
                        // Add click event to file input
                        dropArea.addEventListener('click', () => {
                            const fileInput = document.getElementById('inventoryXlsx');
                            fileInput.click();
                        });
                    },
                    preConfirm: () => {
                        const fileInput = document.getElementById('inventoryXlsx');
                        const file = fileInput.files[0];

                        if (!file) {
                            Swal.showValidationMessage('Mohon pilih file xlsx.');
                        }

                        // Prepare FormData to send the file
                        const formData = new FormData();
                        formData.append('inventoryXlsx', file);

                        // Send POST request to /api/inventory with the FormData
                        return fetch('/api/inventory', {
                            method: 'POST',
                            body: formData,
                        })
                            .then(response => {
                                if (!response.ok)
                                    Swal.showValidationMessage(response.statusText);
                                return response.json();
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                })
                .then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: 'Berhasil',
                            text: 'Data Inventaris berhasil diunggah.',
                            icon: 'success'
                        }).then(() => {
                            // Refresh the inventory data after a successful upload
                            fetchCadetData();
                        });
                    } else if(result.isDenied) {
                        downloadTemplate()
                    }
                    dropArea.removeEventListener('dragover', handleDragOver);
                    dropArea.removeEventListener('dragleave', handleDragLeave);
                    dropArea.removeEventListener('drop', handleFileSelect);
                    dropArea.removeEventListener('click');
                });
            });
            

            function handleDragOver(evt) {
                evt.stopPropagation();
                evt.preventDefault();
                evt.dataTransfer.dropEffect = 'copy';
                const dropArea = document.getElementById('dropArea');
                dropArea.classList.add('drag-over');
            }

            function handleDragLeave(evt) {
                evt.stopPropagation();
                evt.preventDefault();
                const dropArea = document.getElementById('dropArea');
                dropArea.classList.remove('drag-over');
            }

            function handleFileSelect(evt) {
                evt.stopPropagation();
                evt.preventDefault();
                const dropArea = document.getElementById('dropArea');
                dropArea.classList.remove('drag-over');

                const file = evt.dataTransfer.files[0];
                const fileInput = document.getElementById('inventoryXlsx');
                fileInput.files = evt.dataTransfer.files;

                Swal.clickConfirm(); // Trigger the 'Unggah' button click
            }

            function downloadTemplate() {
                const exampleData = [
                    { id: 'MON-001', name: 'Monitor MSI', category: 'monitor', status: 'baik', location: 'dewan' },
                    { id: 'MOU-001', name: 'Mouse LG', category: 'mouse', status: 'rusak', location: 'tengah' },
                    { id: 'KB-001', name: 'Keyboard ASUS', category: 'keyboard', status: 'rusak', location: 'lemari' },
                    { id: 'CPU-001', name: 'ROG-213', category: 'cpu', status: 'baik', location: 'warnet' }
                ];

                const header = Object.keys(exampleData[0]);

                const data = [header, ...exampleData.map(item => header.map(key => item[key]))];

                const blob = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(blob, XLSX.utils.aoa_to_sheet(data), 'template');
                XLSX.writeFile(blob, 'inventory_template.xlsx', { bookSST: true, bookType: 'xlsx', mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            }

    
        });
    </script>
</body>

</html>
